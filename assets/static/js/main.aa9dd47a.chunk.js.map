{"version":3,"sources":["Components/proxyConsole.tsx","Components/codeBlock.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProxyConsole","children","onClickHandler","a","proxy_url","document","getElementById","value","target","querySelector","body","fetch","method","JSON","stringify","headers","className","type","id","name","checked","htmlFor","placeholder","onClick","CodeBlock","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAmCeA,G,MAhCgB,SAAC,GAAkB,EAAhBC,SAAiB,IACzCC,EAAc,uCAAG,gCAAAC,EAAA,6DAEfC,EAAoBC,SAASC,eAAe,aAAaC,MAEzDC,EAAiBH,SAASI,cAAc,gCAAgCF,MACxEG,EAAO,CAAC,YAAeF,EAAQ,aAAgBJ,GALhC,SAObO,MAAM,mBAAoB,CAC5BC,OAAQ,OACRF,KAAMG,KAAKC,UAAUJ,GACrBK,QAAS,CAAC,eAAgB,sBAVX,2CAAH,qDAcpB,OAAO,yBAAKC,UAAU,gBAClB,kCACI,0CACA,2BAAOC,KAAK,QAAQC,GAAG,aAAaC,KAAK,SAASZ,MAAM,MAAMa,SAAO,IACrE,2BAAOC,QAAQ,cAAf,OACA,6BACA,2BAAOJ,KAAK,QAAQC,GAAG,aAAaC,KAAK,SAASZ,MAAM,QACxD,2BAAOc,QAAQ,cAAf,QAEJ,2BAAOJ,KAAK,MAAMC,GAAG,YAAYC,KAAK,YAAYH,UAAU,WAAWM,YAAY,mCACnF,6BACA,yBAAKN,UAAU,uBACX,4BAAQA,UAAU,mBAAmBO,QAASrB,GAA9C,eCtBGsB,G,MAJa,SAAC,GAAmB,IAAjBvB,EAAgB,EAAhBA,SAC3B,OAAO,yBAAKe,UAAU,aAAaf,KC4BxBwB,MAzBf,WACE,OACE,yBAAKT,UAAU,OACb,yBAAKA,UAAU,QACX,mDACA,kBAAC,EAAD,mCAC+B,6BAD/B,4BAE6B,6BAF7B,4BAG6B,8BAE7B,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,SACX,kBAAC,EAAD,KACI,0BAAMA,UAAU,aAAhB,KADJ,4VACiY,6BAC7X,6BACA,0BAAMA,UAAU,aAAhB,KAHJ,QAG6C,6BACzC,6BACA,0BAAMA,UAAU,aAAhB,KALJ,4VAKiY,iCCdvXU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDiIpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aa9dd47a.chunk.js","sourcesContent":["import React from \"react\";\nimport './proxyConsole.css';\n\nconst ProxyConsole: React.FC = ({ children } ) => {\n    const onClickHandler = async () => {\n        // @ts-ignore\n        let proxy_url: string = document.getElementById(\"proxy_url\").value;\n        // @ts-ignore\n        let target: string = document.querySelector(\"input[name='target']:checked\").value;\n        let body = {\"participant\": target, \"proxy_config\": proxy_url};\n\n        await fetch(\"/start_challenge\", {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {'Content-Type': 'application/json'} });\n\n    };\n\n    return <div className=\"ProxyConsole\">\n        <fieldset>\n            <legend>Target</legend>\n            <input type=\"radio\" id=\"target_bob\" name=\"target\" value=\"BOB\" checked/>\n            <label htmlFor=\"target_bob\">Bob</label>\n            <br />\n            <input type=\"radio\" id=\"target_eve\" name=\"target\" value=\"EVE\"/>\n            <label htmlFor=\"target_eve\">Eve</label>\n        </fieldset>\n        <input type=\"url\" id=\"proxy_url\" name=\"proxy_url\" className=\"ProxyUrl\" placeholder=\"Internet Accessible HTTP Proxy\"/>\n        <br/>\n        <div className=\"ProxyStartContainer\">\n            <button className=\"ProxyStartButton\" onClick={onClickHandler}> Start </button>\n        </div>\n    </div>\n}\n\nexport default ProxyConsole;","import React from \"react\";\nimport './codeBlock.css';\n\n\nconst CodeBlock: React.FC = ({ children } ) => {\n    return <div className=\"CodeBlock\">{children}</div>\n}\n\nexport default CodeBlock;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MissionDialog from \"./Components/missionDialog\";\nimport ProxyConsole from \"./Components/proxyConsole\";\nimport CodeBlock from \"./Components/codeBlock\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Left\">\n          <h2>d0nut 10k Challenge</h2>\n          <CodeBlock>\n              alice.d0nut10kchallenge.com<br/>\n              bob.d0nut10kchallenge.com<br/>\n              iam.d0nut10kchallenge.com<br/>\n          </CodeBlock>\n          <ProxyConsole/>\n      </div>\n      <div className=\"Right\">\n          <CodeBlock>\n              <span className=\"Important\">N</span>=Q5y0/sUgJD1W/KlAgQF6Fhv3d+JpU/Udq9ZgoCPuZRJrxj+KQsvMRgfZDfzNJunxvTe2AZYWBN0NbFTUEcx5S7YqKAnNZjxI7kKKG9j2EnlHwtHUknPQy5YAAlmSRkvZ8vmu2PZeb721IEgi3KZGLb10fJGfdSuNkj4cLTbzaToc9CJcZ88Tt8fZuxOWUtPiXu3STN2K6BrKFsGCFIQTLExyqJyVFEMVOyg/savJsDQ//iBjwG8qcU/8jCteYVKsDSmPEDUwBEYAIKde2L8Cte35SLowEusLnql2zSeL759m0B3RKhZqiF88wBX4Ho48/S6tuAzkL3lOuay4LK1k4A==<br/>\n              <br/>\n              <span className=\"Important\">E</span>=AQAB<br/>\n              <br/>\n              <span className=\"Important\">D</span>=Wdwyy3NQIuKj7sW4DBdWgHVrRpD+KxwBJT++ejMqJlPjeMP5m0H3Am2YRCMUvQe7T2uVUxCOL+/c1QAU3k7Qvd2yU/n6MXdT8jZ4FkCOnAQ38GUJ7Ltw9eGN/jqUhgXioA8EzyJVCj8c6sLlq8cApEZIDi0S3f0QG+S4cOi2l+1w1GdGlpdugBoVDI8p43kiNb+IUWaaP8xOCCvBNor5RAAMmnxR3k1t/osz++zbPC81qpwNUv46utejDeP7f8pjBiDWne+S+WbEoftPgOAPXO8097e+AJRlzaC/NnAPIr1YquZVTs7dJCxWNcm6hEwSC6s3o9K/Od2MSzu+rjKSgg==<br/>\n          </CodeBlock>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}